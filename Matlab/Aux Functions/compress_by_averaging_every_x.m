function [ar_result] = compress_by_averaging_every_x(array, d, x)
    
    % On dimension d, compress the array x times, by averaging x values.

    % IMPORTANT NOTE:
    % At the moment, only works for :
    %     a) 4D and 7D arrays;
    %     b) to compress the last dimension, so d = length(size(array)) 
    % See below the example on how to extend both of these properties;
    % Maybe there's some general step to do with arrays to overcome the 
    % problem of having to give several arguments in a general way, maybe
    % with some 'unpacking'.
    
    if x == 1
        ar_result = array;
        return
    end
        
    
    array_dim = length(size(array));
    if d ~= array_dim
        error(['The function compress_by_averaging_every_x() is not ', ...
               'ready to take a dimension different from the array''s ',...
               'size. Do some copy & pasting if you need that support.']);
    end
    
    array_size = size(array);
    
    switch array_dim
        case 4
            % EXAMPLE OF WHAT TO DO TO EXTEND THE d to other sizes.
            
            switch d
                case 3 % never used!
                    ar_aux1 = reshape(array, ...
                                      array_size(1), ...
                                      array_size(2), ...
                                      x, ...
                                      array_size(4), ...
                                      []);

                    ar_aux2 = mean(ar_aux1, d);

                    new_size = array_size(d)/x;

                    ar_result = reshape(ar_aux2, ...
                                        array_size(1), ...
                                        array_size(2), ...
                                        new_size, ...
                                        array_size(4));
                case 4
                    ar_aux1 = reshape(array, ...
                                      array_size(1), ...
                                      array_size(2), ...
                                      array_size(3), ...
                                      x, []);

                    ar_aux2 = mean(ar_aux1, d);

                    new_size = array_size(d)/x;

                    ar_result = reshape(ar_aux2, ...
                                        array_size(1), ...
                                        array_size(2), ...
                                        array_size(3), ...
                                        new_size);
                otherwise
                    ar_result = [];
            end
        case 7
            ar_aux1 = reshape(array, ...
                              array_size(1), ...
                              array_size(2), ...
                              array_size(3), ...
                              array_size(4), ...
                              array_size(5), ...
                              array_size(6), ...
                              x, []);
            
            ar_aux2 = mean(ar_aux1, d);
    
            new_size = array_size(d)/x;
    
            ar_result = reshape(ar_aux2, ...
                                array_size(1), ...
                                array_size(2), ...
                                array_size(3), ...
                                array_size(4), ...
                                array_size(5), ...
                                array_size(6), ...
                                new_size);
        otherwise
            error(['The function compress_by_averaging_every_x() only ', ...
                   'supports 4D and 7D arrays, at the moment.']);
    end
end