function [flow_control] = format_flow_control(flow_control)
                       

% flow_control is a variable to control which parts of this
% code are executed. That way, from one executable only we can
% divide the functionality in setup and in actual channel calculation
% flow_control = 0 (i.e. 'complete' mode: runs everything)
% flow_control = 1 (i.e. 'setup' mode: executes only the setup, useful for
%                        fine-tuning the simulation parameters using plots
% flow_control = 2 (i.e. 'save_setup' mode: same as 1, but also
%                        saves all the variables.
% flow_control = 3 (i.e. 'calculate_channel' mode (to be used after 2))
%                        Computes channel in a parallel state
% flow_control = 4 (i.e. 'apply_blocking' mode - loads time domain channel
%                        and applies function to each of them, saves 
%                        channel in time domain, and converts each part to 
%                        frequency domain and saves that too.
% flow_control = 5 (i.e. 'aggregate_channel' mode will take the full 
%                        channel in the time or frequency domain and 
%                        make it into one file one. 
%                        (Attention to note size restrictions!)
% flow_control may be inputed as strings or as numbers.
% the input and output paths have different roles depending on the execution
% mode (control variable):
% 0 - input parameter file, output complete channel.
% 1 - input parameter file, 'None' (it will not be used!)
% 2 - input parameter file, variable file used for storing all vars values
% 3 - variable file generated by setup, channel saved file
% Note that Mode 3 is only possible to use when the builders from Mode 2
% are generated. These builders are going to be saved with a default name
% to a builders file. This part is hidden from the user control, because 
% generating a builder is fast and there should be no point in keeping 
% several builders active.
    if isnan(str2double(flow_control))
        switch flow_control
            case 'complete'
                flow_control = 0;
            case 'setup'
                flow_control = 1;
            case 'save_setup'
                flow_control = 2;
            case 'calculate_channel'
                flow_control = 3;
            case 'apply_blocking'
                flow_control = 4;
            case 'aggregate_channel'
                flow_control = 5;
            otherwise
                flow_control = 0; % covers isempty case
        end
    else % It may be numbers INSIDE the string... if so, cast to number
        flow_control = str2double(flow_control);
    end
end

