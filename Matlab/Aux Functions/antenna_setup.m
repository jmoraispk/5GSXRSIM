function [] = antenna_setup(l, f_values, rx_ant, tx_ant, ...
                            diff_orthogonal_polarisation, n_room, ...
                            user_ant_config, user_ant_element_spacing, ...
                            cam_ant_config, cam_ant_element_spacing, ...
                            bs_ant_config, bs_ant_element_spacing, ...
                            room_centre_xy, tx_height, rx_pos_offset, ...
                            rx_rot_offset, ...
                            bs_ant_hybrid_bf, user_ant_hybrid_bf, ...
                            cam_ant_hybrid_bf, bs_ant_subarray, ...
                            user_ant_subarray, cam_ant_subarray, ...
                            bs_one_response_per_subarray, ...
                            user_one_response_per_subarray, ...
                            cam_one_response_per_subarray)
    
    debug = 0;
    
    
    
    
    
    % Sets up the antennas  
    
    for f=f_values
        f_idx = find(f==f_values);
        for k=1:l.no_rx
            if debug
                disp(['Antenna for Freq ', num2str(f_values(f_idx)/1e9), ...
                         'GHz, UE', num2str(k)]); %#ok<UNRCH>
            end
            if k > n_room(1) %so it's a camera
                l.rx_array(f_idx, k) = make_antenna(rx_ant(f_idx, k), ...
                            f, diff_orthogonal_polarisation, ...
                            cam_ant_config(f_idx, :), ...
                            cam_ant_element_spacing, ...
                            cam_ant_hybrid_bf, ...
                            cam_ant_subarray(f_idx, :), ...
                            cam_one_response_per_subarray);
                 
                % Fix problem with the coefficients: this way Phased and 
                % Quadriga will be the absolutely the same.
                % THIS needs to be right after the antenna creation!
                fix_quadriga_coeffs_problem(l.rx_array(f_idx, k), ...
                                            cam_ant_config(f_idx, :), ...
                                            diff_orthogonal_polarisation);
                
                % Rotate elements such that they're facing Upwards!
                l.rx_array(f_idx, k).rotate_pattern(-90, 'y');
            else % it's an headset antenna
                % USER Array
                l.rx_array(f_idx, k) = make_antenna(rx_ant(f_idx, k), ...
                                f, diff_orthogonal_polarisation, ...
                                user_ant_config(f_idx,:), ...
                                user_ant_element_spacing, ...
                                user_ant_hybrid_bf, ...
                                user_ant_subarray(f_idx, :), ...
                                user_one_response_per_subarray);
                % default coupling is perfect isolation
                
                % Fix problem with the coefficients: this way Phased and 
                % Quadriga will be the absolutely the same.
                % THIS needs to be right after the antenna creation!
                fix_quadriga_coeffs_problem(l.rx_array(f_idx, k), ...
                                            user_ant_config(f_idx,:), ...
                                            diff_orthogonal_polarisation);
                
                % Rotate the elements so they are horizontal
                l.rx_array(f_idx, k).rotate_pattern(rx_rot_offset, 'x');
                % The above line is necessary for ULAs, and does not affect
                % URAs... 
            
            
                % Offset antennas from the centre of the head.
                l.rx_array(f_idx, k).element_position = ...
                    l.rx_array(f_idx, k).element_position + ...
                              repmat(rx_pos_offset', ...
                                     [1 l.rx_array(f_idx, k).no_elements]); 
            end
        end
        for k=1:l.no_tx
            % BS Antenna
            if debug
                disp(['Antenna for Freq ', num2str(f_values(f_idx)/1e9), ...
                         'GHz, BS', num2str(k)]);
            end
            
            l.tx_array(f_idx, k) = make_antenna(tx_ant(f_idx, k), ...
                            f, diff_orthogonal_polarisation, ...
                            bs_ant_config(f_idx, :), ...
                            bs_ant_element_spacing, ...
                            bs_ant_hybrid_bf, ...
                            bs_ant_subarray(f_idx, :), ...
                            bs_one_response_per_subarray);
            
            % Fix problem with the coefficients: this way Phased and 
            % Quadriga will be the absolutely the same.
            % THIS needs to be right after the antenna creation!
            fix_quadriga_coeffs_problem(l.tx_array(f_idx, k), ...
                                        bs_ant_config(f_idx, :), ...
                                        diff_orthogonal_polarisation);

%             if k == 1
%                 % Rotate elements Down, to 
%                 l.tx_array(f_idx, k).rotate_pattern(90, 'y');
%             end


            % Rotate the elements towards the centre of the room, the 
            % spatial centre! (will be someone on top of the
            % table)
            
            point_antenna_to_target(l.tx_track(k), l.tx_array(f_idx, k), ...
                                        [room_centre_xy, tx_height/2])
        end
    end
end

